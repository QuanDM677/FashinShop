/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package fashion.store.ui.manager;

import fashion.store.dao.InventoryDAO;
import fashion.store.dao.ProductDAO;
import fashion.store.dao.impl.InventoryDAOImpl;
import fashion.store.dao.impl.ProductDAOImpl;
import fashion.store.entity.Inventory;
import fashion.store.entity.Product;
import fashion.store.util.XDialog;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class InventoryManagerJDialog extends javax.swing.JDialog {

    /**
     * Creates new form Inventory
     */
    public InventoryManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.open();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInventory = new javax.swing.JTable();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        btnCheckAll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        BtnThem = new javax.swing.JButton();
        BtnCapNhap = new javax.swing.JButton();
        BtnXoa = new javax.swing.JButton();
        BtnLamMoi = new javax.swing.JButton();
        BtnBack = new javax.swing.JButton();
        BtnFirst = new javax.swing.JButton();
        BtnNext = new javax.swing.JButton();
        BtnLast = new javax.swing.JButton();
        cbLoaiSanPham = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtSoLuongTonKho = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý kho");

        tblInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã loại", "Số lượng tồn kho", "Chọn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInventoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblInventory);

        btnUncheckAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        btnUncheckAll.setText("Bỏ chọn chất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnDeleteCheckedItems.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash.png"))); // NOI18N
        btnDeleteCheckedItems.setText("Xóa các mục được chọn");
        btnDeleteCheckedItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedItemsActionPerformed(evt);
            }
        });

        btnCheckAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/accept.png"))); // NOI18N
        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCheckAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUncheckAll)
                        .addGap(12, 12, 12)
                        .addComponent(btnDeleteCheckedItems)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnUncheckAll)
                        .addComponent(btnCheckAll))
                    .addComponent(btnDeleteCheckedItems))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Danh sách", jPanel1);

        jLabel1.setText("Loại sản phẩm:");

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        BtnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        BtnThem.setText("Tạo mới");
        BtnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnThemActionPerformed(evt);
            }
        });

        BtnCapNhap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png"))); // NOI18N
        BtnCapNhap.setText("Cập nhập");
        BtnCapNhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCapNhapActionPerformed(evt);
            }
        });

        BtnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash.png"))); // NOI18N
        BtnXoa.setText("Xóa");
        BtnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnXoaActionPerformed(evt);
            }
        });

        BtnLamMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/refresh.png"))); // NOI18N
        BtnLamMoi.setText("Làm mới");
        BtnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLamMoiActionPerformed(evt);
            }
        });

        BtnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/back.png"))); // NOI18N
        BtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBackActionPerformed(evt);
            }
        });

        BtnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Fisrt.png"))); // NOI18N
        BtnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnFirstActionPerformed(evt);
            }
        });

        BtnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/next.png"))); // NOI18N
        BtnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnNextActionPerformed(evt);
            }
        });

        BtnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/last.png"))); // NOI18N
        BtnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BtnThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnCapNhap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(146, 146, 146))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BtnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BtnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BtnFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BtnLast, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BtnThem)
                        .addComponent(BtnCapNhap))
                    .addComponent(BtnBack)
                    .addComponent(BtnNext))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BtnXoa)
                        .addComponent(BtnLamMoi))
                    .addComponent(BtnFirst)
                    .addComponent(BtnLast))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cbLoaiSanPham.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Số lượng tồn kho:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(cbLoaiSanPham, 0, 550, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(txtSoLuongTonKho)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbLoaiSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSoLuongTonKho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Biểu mẫu", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnThemActionPerformed
        this.create();
    }//GEN-LAST:event_BtnThemActionPerformed

    private void BtnCapNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCapNhapActionPerformed
        this.update();
    }//GEN-LAST:event_BtnCapNhapActionPerformed

    private void BtnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnXoaActionPerformed
        this.delete();
    }//GEN-LAST:event_BtnXoaActionPerformed

    private void BtnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLamMoiActionPerformed
        this.clear();
    }//GEN-LAST:event_BtnLamMoiActionPerformed

    private void BtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBackActionPerformed
        this.movePrevious();
    }//GEN-LAST:event_BtnBackActionPerformed

    private void BtnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnFirstActionPerformed
        this.moveFirst();
    }//GEN-LAST:event_BtnFirstActionPerformed

    private void BtnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnNextActionPerformed
        this.moveNext();
    }//GEN-LAST:event_BtnNextActionPerformed

    private void BtnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLastActionPerformed
        this.moveLast();
    }//GEN-LAST:event_BtnLastActionPerformed

    private void tblInventoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInventoryMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.edit(); // edit() sẽ tự lấy dòng đang chọn, setForm, setEditable, chuyển tab
        }
    }//GEN-LAST:event_tblInventoryMouseClicked

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        // TODO add your handling code here:
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        // TODO add your handling code here:
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnDeleteCheckedItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedItemsActionPerformed
        // TODO add your handling code here:
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedItemsActionPerformed

    InventoryDAO dao = new InventoryDAOImpl();
    ProductDAO productDao = new ProductDAOImpl();
    List<Inventory> items = List.of();
    List<Product> products = List.of();

    public void open() {
        this.setLocationRelativeTo(null);
        this.fillProductsToCombo();
        this.fillToTable();
        this.clear();
    }

    public void fillProductsToCombo() {
        products = productDao.findAll();
        cbLoaiSanPham.removeAllItems();
        for (Product p : products) {
            cbLoaiSanPham.addItem(p.getId() + " - " + p.getName());
        }
    }

    public void fillToTable() {
        items = dao.findAll();
        DefaultTableModel model = (DefaultTableModel) tblInventory.getModel();
        model.setRowCount(0);
        for (Inventory item : items) {
            Product p = productDao.findById(item.getProductId());
            String display = item.getProductId();
            if (p != null) {
                display += " - " + p.getName();
            }
            Object[] row = {
                display,
                item.getQuantity(),
                false
            };
            model.addRow(row);
        }
    }

    public void edit() {
        int row = tblInventory.getSelectedRow();
        if (row >= 0 && items != null && row < items.size()) {
            Inventory entity = items.get(row);
            setForm(entity);
            setEditable(true);
            jTabbedPane1.setSelectedIndex(1);
        }
    }

    public void checkAll() {
        this.setCheckedAll(true);
    }

    public void uncheckAll() {
        this.setCheckedAll(false);
    }

    private void setCheckedAll(boolean checked) {
        for (int i = 0; i < tblInventory.getRowCount(); i++) {
            tblInventory.setValueAt(checked, i, 2);
        }
    }

    public void deleteCheckedItems() {
        int cnt = 0;
        for (int i = 0; i < tblInventory.getRowCount(); i++) {
            if ((Boolean) tblInventory.getValueAt(i, 2)) {
                cnt++;
            }
        }
        if (cnt == 0) {
            XDialog.alert("Vui lòng chọn ít nhất một mục để xóa!");
            return;
        }
        if (XDialog.confirm("Bạn thật sự muốn xóa " + cnt + " mục chọn?")) {
            int deleted = 0;
            for (int i = 0; i < tblInventory.getRowCount(); i++) {
                if ((Boolean) tblInventory.getValueAt(i, 2)) {
                    String productId = items.get(i).getProductId();
                    try {
                        dao.deleteById(productId);
                        deleted++;
                    } catch (Exception ex) {
                        XDialog.error("Lỗi khi xóa sản phẩm mã: " + productId + " - " + ex.getMessage());
                    }
                }
            }
            this.fillToTable();
            XDialog.success("Đã xóa " + deleted + " mục!");
        }
    }

    public void setForm(Inventory entity) {
        if (entity == null || entity.getProductId() == null || entity.getProductId().isBlank()) {
            cbLoaiSanPham.setSelectedIndex(-1);
            txtSoLuongTonKho.setText("");
        } else {
            for (int i = 0; i < cbLoaiSanPham.getItemCount(); i++) {
                String item = cbLoaiSanPham.getItemAt(i);
                if (item.startsWith(entity.getProductId())) {
                    cbLoaiSanPham.setSelectedIndex(i);
                    break;
                }
            }
            txtSoLuongTonKho.setText(String.valueOf(entity.getQuantity()));
        }
    }

    public Inventory getForm() {
        Inventory entity = new Inventory();
        int idx = cbLoaiSanPham.getSelectedIndex();
        if (idx >= 0 && products != null && idx < products.size()) {
            entity.setProductId(products.get(idx).getId());
        }
        try {
            entity.setQuantity(Integer.parseInt(txtSoLuongTonKho.getText().trim()));
        } catch (Exception e) {
            entity.setQuantity(0);
        }
        return entity;
    }

    private boolean validateInventory(Inventory entity) {
        if (entity.getProductId() == null || entity.getProductId().isBlank()) {
            XDialog.warning("Vui lòng chọn sản phẩm!");
            cbLoaiSanPham.requestFocus();
            return false;
        }
        if (txtSoLuongTonKho.getText().isBlank()) {
            XDialog.warning("Số lượng không được để trống!");
            txtSoLuongTonKho.requestFocus();
            return false;
        }
        try {
            int qty = Integer.parseInt(txtSoLuongTonKho.getText().trim());
            if (qty < 0) {
                XDialog.warning("Số lượng phải >= 0!");
                txtSoLuongTonKho.requestFocus();
                return false;
            }
        } catch (NumberFormatException e) {
            XDialog.warning("Số lượng phải là số nguyên!");
            txtSoLuongTonKho.requestFocus();
            return false;
        }
        return true;
    }

    private boolean isDuplicateProductId(String productId) {
        return dao.findById(productId) != null;
    }

    public void create() {
        Inventory entity = this.getForm();
        if (!validateInventory(entity)) {
            return;
        }
        if (isDuplicateProductId(entity.getProductId())) {
            XDialog.error("Sản phẩm đã có trong tồn kho. Vui lòng cập nhật thay vì thêm mới!");
            cbLoaiSanPham.requestFocus();
            return;
        }
        try {
            dao.create(entity);
            // --- Cập nhật trạng thái sản phẩm sau khi thêm mới ---
            Product prod = productDao.findById(entity.getProductId());
            if (prod != null) {
                if (entity.getQuantity() > 0 && !prod.isAvailable()) {
                    prod.setAvailable(true);
                    productDao.update(prod);
                }
                if (entity.getQuantity() == 0 && prod.isAvailable()) {
                    prod.setAvailable(false);
                    productDao.update(prod);
                }
            }
            // -----------------------------------------------------
            this.fillToTable();
            this.clear();
            XDialog.success("Thêm tồn kho thành công!");
        } catch (Exception ex) {
            XDialog.error("Lỗi khi thêm tồn kho: " + ex.getMessage());
        }
    }

    public void update() {
        Inventory entity = this.getForm();
        if (!validateInventory(entity)) {
            return;
        }
        try {
            dao.update(entity);
            // --- Cập nhật trạng thái sản phẩm sau khi cập nhật tồn kho ---
            Product prod = productDao.findById(entity.getProductId());
            if (prod != null) {
                if (entity.getQuantity() > 0 && !prod.isAvailable()) {
                    prod.setAvailable(true);
                    productDao.update(prod);
                }
                if (entity.getQuantity() == 0 && prod.isAvailable()) {
                    prod.setAvailable(false);
                    productDao.update(prod);
                }
            }
            // -------------------------------------------------------------
            this.fillToTable();
            XDialog.success("Cập nhật tồn kho thành công!");
        } catch (Exception ex) {
            XDialog.error("Lỗi khi cập nhật tồn kho: " + ex.getMessage());
        }
    }

    public void delete() {
        int idx = cbLoaiSanPham.getSelectedIndex();
        if (idx < 0) {
            XDialog.warning("Vui lòng chọn sản phẩm để xóa tồn kho!");
            return;
        }
        String productId = products.get(idx).getId();
        if (XDialog.confirm("Bạn thực sự muốn xóa tồn kho của sản phẩm này?")) {
            try {
                dao.deleteById(productId);
                this.fillToTable();
                this.clear();
                XDialog.success("Đã xóa tồn kho!");
            } catch (Exception ex) {
                XDialog.error("Lỗi khi xóa tồn kho: " + ex.getMessage());
            }
        }
    }

    public void clear() {
        this.setForm(new Inventory());
        this.setEditable(false);
        tblInventory.clearSelection();
    }

    public void setEditable(boolean editable) {
        cbLoaiSanPham.setEnabled(!editable);
        BtnThem.setEnabled(!editable);
        BtnCapNhap.setEnabled(editable);
        BtnXoa.setEnabled(editable);
        int rowCount = tblInventory.getRowCount();
        boolean nav = rowCount > 0;
        BtnFirst.setEnabled(nav);
        BtnBack.setEnabled(nav);
        BtnNext.setEnabled(nav);
        BtnLast.setEnabled(nav);
    }

    public void moveFirst() {
        this.moveTo(0);
    }

    public void movePrevious() {
        this.moveTo(tblInventory.getSelectedRow() - 1);
    }

    public void moveNext() {
        this.moveTo(tblInventory.getSelectedRow() + 1);
    }

    public void moveLast() {
        this.moveTo(tblInventory.getRowCount() - 1);
    }

    public void moveTo(int index) {
        int rowCount = tblInventory.getRowCount();
        if (rowCount == 0) {
            return;
        }
        if (index < 0) {
            index = rowCount - 1;
        }
        if (index >= rowCount) {
            index = 0;
        }
        tblInventory.setRowSelectionInterval(index, index);
        setForm(items.get(index));
        setEditable(true);
        jTabbedPane1.setSelectedIndex(1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventoryManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventoryManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventoryManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventoryManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InventoryManagerJDialog dialog = new InventoryManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBack;
    private javax.swing.JButton BtnCapNhap;
    private javax.swing.JButton BtnFirst;
    private javax.swing.JButton BtnLamMoi;
    private javax.swing.JButton BtnLast;
    private javax.swing.JButton BtnNext;
    private javax.swing.JButton BtnThem;
    private javax.swing.JButton BtnXoa;
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JComboBox<String> cbLoaiSanPham;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblInventory;
    private javax.swing.JTextField txtSoLuongTonKho;
    // End of variables declaration//GEN-END:variables
}
