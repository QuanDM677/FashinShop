/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package fashion.store.ui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import fashion.store.dao.CategoryDAO;
import fashion.store.dao.InventoryDAO;
import fashion.store.dao.impl.BillDetailDAOImpl;
import fashion.store.dao.impl.CategoryDAOImpl;
import fashion.store.dao.impl.ProductDAOImpl;
import fashion.store.entity.Bill;
import fashion.store.entity.BillDetail;
import fashion.store.entity.Category;
import fashion.store.entity.Product;
import fashion.store.util.XDialog;
import fashion.store.dao.ProductDAO;
import fashion.store.dao.impl.InventoryDAOImpl;
import fashion.store.entity.Inventory;
import fashion.store.ui.controller.ProductController;

/**
 *
 * @author PC
 */
public class ProductJDialog extends javax.swing.JDialog implements ProductController {

    private List<Product> availableProducts = new ArrayList<>();
    private Bill bill;
    private CategoryDAO categoryDao = new CategoryDAOImpl();
    private ProductDAO productDao = new ProductDAOImpl();
    private InventoryDAO inventoryDao = new InventoryDAOImpl();
    private List<Category> categories = List.of();
    private List<Product> products = List.of();

    public void setBill(Bill bill) {
        this.bill = bill;
    }

    /**
     * Creates new form DrinkJDialog
     */
    public ProductJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sản phẩm");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Loại sản phẩm"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCategories);

        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã", "Tên sản phẩm", "Đơn giá", "Giảm giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProducts);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriesMouseClicked
        this.fillProducts();
    }//GEN-LAST:event_tblCategoriesMouseClicked

    private void tblProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductsMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            this.addProductToBill();
        }
    }//GEN-LAST:event_tblProductsMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    public void open() {
        this.setLocationRelativeTo(null);
        this.fillCategories();
        this.fillProducts();
    }

    public void fillCategories() {
        categories = categoryDao.findAll();
        DefaultTableModel model = (DefaultTableModel) tblCategories.getModel();
        model.setRowCount(0);
        categories.forEach(d -> model.addRow(new Object[]{d.getName()}));
        if (!categories.isEmpty()) {
            tblCategories.setRowSelectionInterval(0, 0);
        }
    }

    public void fillProducts() {
        if (categories.isEmpty()) {
            return;
        }
        int catRow = tblCategories.getSelectedRow();
        if (catRow < 0 || catRow >= categories.size()) {
            return;
        }
        Category category = categories.get(catRow);
        products = productDao.findByCategoryId(category.getId());
        DefaultTableModel model = (DefaultTableModel) tblProducts.getModel();
        model.setRowCount(0);
        availableProducts.clear();
        for (Product d : products) {
            if (d.isAvailable()) {
                Object[] row = {
                    d.getId(),
                    d.getName(),
                    String.format("$%.1f", d.getUnitPrice()),
                    String.format("%.0f%%", d.getDiscount() * 100)
                };
                model.addRow(row);
                availableProducts.add(d);
            }
        }
    }

    // HÀM CHÍNH: Thêm sản phẩm vào bill và cập nhật kho
    public void addProductToBill() {
        int productRow = tblProducts.getSelectedRow();
        if (bill == null || bill.getId() == null) {
            XDialog.alert("Phiếu chưa được tạo hoặc không hợp lệ!");
            return;
        }
        if (availableProducts.isEmpty() || productRow < 0 || productRow >= availableProducts.size()) {
            XDialog.alert("Vui lòng chọn sản phẩm!");
            return;
        }
        String quantity = XDialog.prompt("Số lượng?");
        if (quantity != null && !quantity.isEmpty()) {
            try {
                int qty = Integer.parseInt(quantity);
                if (qty < 1) {
                    throw new NumberFormatException();
                }

                Product product = availableProducts.get(productRow);
                Inventory inv = inventoryDao.findById(product.getId());
                if (inv == null) {
                    XDialog.warning("Không tìm thấy tồn kho cho sản phẩm này!");
                    return;
                }
                // KIỂM TRA TỒN KHO TRƯỚC KHI THÊM
                if (inv.getQuantity() < qty) {
                    XDialog.warning("Không đủ hàng trong kho!");
                    return;
                }
                // Trừ tồn kho
                inv.setQuantity(inv.getQuantity() - qty);
                inventoryDao.update(inv);

                // Nếu hết hàng thì cập nhật trạng thái sản phẩm
                if (inv.getQuantity() == 0) {
                    product.setAvailable(false);
                    productDao.update(product);
                }

                // Thêm hoặc cập nhật BillDetail
                BillDetailDAOImpl billDetailDao = new BillDetailDAOImpl();
                BillDetail existingDetail = billDetailDao.findByBillIdAndProductId(bill.getId(), product.getId());
                if (existingDetail != null) {
                    existingDetail.setQuantity(existingDetail.getQuantity() + qty);
                    billDetailDao.update(existingDetail);
                    XDialog.alert("Đã cập nhật số lượng sản phẩm trong phiếu!");
                } else {
                    BillDetail detail = new BillDetail();
                    detail.setBillId(bill.getId());
                    detail.setProductId(product.getId());
                    detail.setUnitPrice(product.getUnitPrice());
                    detail.setDiscount(product.getDiscount());
                    detail.setQuantity(qty);
                    billDetailDao.create(detail);
                    XDialog.alert("Đã thêm sản phẩm vào phiếu!");
                }
                this.dispose();
            } catch (NumberFormatException ex) {
                XDialog.alert("Số lượng phải là số nguyên dương!");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ProductJDialog dialog = new ProductJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTable tblProducts;
    // End of variables declaration//GEN-END:variables

}
